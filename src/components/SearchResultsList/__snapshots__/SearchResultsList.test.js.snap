// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Search Results List renders correcly with data and title with data 1`] = `
<RCTScrollView
  ListEmptyComponent={[Function]}
  ListHeaderComponent={[Function]}
  contentContainerStyle={
    Object {
      "flexGrow": 1,
      "padding": 16,
    }
  }
  data={
    Array [
      Array [
        Object {
          "adult": false,
          "backdrop_path": "/ziTxBaF1AhbUwcv2IBiFJAf54qD.jpg",
          "id": 65086,
          "overview": "The story follows a young lawyer, Arthur Kipps.",
          "popularity": 16.334,
          "poster_path": "/aJbeDPUwDe9MLpseTFrNTBaQPzf.jpg",
          "release_date": "2012-02-03",
          "title": "The Woman in Black",
          "vote_average": 6.11,
        },
        Object {
          "adult": false,
          "id": 102899,
          "overview": "Armed with the astonishing ability to shrink in scale but increase in strength.",
          "popularity": 69.704,
          "poster_path": "/rS97hUJ1otKTTripGwQ0ujbuIri.jpg",
          "release_date": "2015-07-14",
          "title": "Ant-Man",
          "vote_average": 7.088,
        },
      ],
    ]
  }
  disableVirtualization={false}
  getItem={[Function]}
  getItemCount={[Function]}
  horizontal={false}
  initialNumToRender={10}
  keyExtractor={[Function]}
  maxToRenderPerBatch={10}
  onContentSizeChange={[Function]}
  onEndReachedThreshold={2}
  onLayout={[Function]}
  onMomentumScrollEnd={[Function]}
  onScroll={[Function]}
  onScrollBeginDrag={[Function]}
  onScrollEndDrag={[Function]}
  removeClippedSubviews={false}
  renderItem={[Function]}
  scrollEventThrottle={50}
  stickyHeaderIndices={Array []}
  updateCellsBatchingPeriod={50}
  viewabilityConfigCallbackPairs={Array []}
  windowSize={21}
>
  <View>
    <View
      onLayout={[Function]}
    >
      <Text
        style={
          Array [
            Object {
              "color": "rgb(28, 28, 30)",
            },
            Object {
              "paddingVertical": 16,
            },
            Object {
              "fontSize": 18,
              "fontWeight": "700",
            },
          ]
        }
      >
        test
      </Text>
    </View>
    <View
      onLayout={[Function]}
      style={null}
    >
      <View
        accessible={true}
        focusable={true}
        onClick={[Function]}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          Object {
            "backgroundColor": "rgb(255, 255, 255)",
            "flexDirection": "row",
            "margin": 2,
            "opacity": 1,
          }
        }
      >
        <Image
          accessibilityIgnoresInvertColors={true}
          resizeMode="cover"
          source={
            Object {
              "uri": NaN,
            }
          }
          style={
            Object {
              "height": 95,
              "width": 160,
            }
          }
        />
        <View
          style={
            Object {
              "flex": 1,
              "flexDirection": "column",
              "flexWrap": "wrap",
              "padding": 16,
            }
          }
        >
          <View
            style={
              Object {
                "paddingBottom": 16,
                "width": "100%",
              }
            }
          >
            <Text
              style={
                Array [
                  Object {
                    "fontSize": 16,
                    "fontWeight": "400",
                  },
                  Object {
                    "color": "rgb(28, 28, 30)",
                  },
                  Object {
                    "flexWrap": "wrap",
                  },
                ]
              }
            />
          </View>
          <View
            style={
              Object {
                "alignItems": "center",
                "flexDirection": "row",
                "justifyContent": "space-between",
              }
            }
          >
            <View
              style={
                Object {
                  "flexDirection": "row",
                }
              }
            />
            <Image
              accessibilityIgnoresInvertColors={true}
              resizeMode="contain"
              source={
                Object {
                  "testUri": "../../../src/assets/play.png",
                }
              }
              style={
                Object {
                  "height": 20,
                  "width": 20,
                }
              }
            />
          </View>
        </View>
      </View>
    </View>
  </View>
</RCTScrollView>
`;

exports[`Search Results List renders correcly with empty data and title 1`] = `
<RCTScrollView
  ListEmptyComponent={[Function]}
  ListHeaderComponent={[Function]}
  contentContainerStyle={
    Object {
      "flexGrow": 1,
      "padding": 16,
    }
  }
  data={Array []}
  disableVirtualization={false}
  getItem={[Function]}
  getItemCount={[Function]}
  horizontal={false}
  initialNumToRender={10}
  keyExtractor={[Function]}
  maxToRenderPerBatch={10}
  onContentSizeChange={[Function]}
  onEndReachedThreshold={2}
  onLayout={[Function]}
  onMomentumScrollEnd={[Function]}
  onScroll={[Function]}
  onScrollBeginDrag={[Function]}
  onScrollEndDrag={[Function]}
  removeClippedSubviews={false}
  renderItem={[Function]}
  scrollEventThrottle={50}
  stickyHeaderIndices={Array []}
  updateCellsBatchingPeriod={50}
  viewabilityConfigCallbackPairs={Array []}
  windowSize={21}
>
  <View>
    <View
      onLayout={[Function]}
    />
    <View
      style={
        Object {
          "alignItems": "center",
          "flexGrow": 1,
          "justifyContent": "center",
        }
      }
    >
      <Text
        style={
          Object {
            "color": "rgb(28, 28, 30)",
          }
        }
      >
        Nothing found
      </Text>
    </View>
  </View>
</RCTScrollView>
`;
